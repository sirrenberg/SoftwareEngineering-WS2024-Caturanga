# This workflow uses actions that are published by AWS (officially authenticated by GitHub).

# Actions in this file are pinned to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

# This workflow will build a container image from your Dockerfile, push it to Amazon ECR, 
# update the ECS Fargate service to use the new image and update the API Gateway stage to point to the new ECS service.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main", "deployment" ]
  pull_request:
    branches: [ "main", "deployment" ]

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY_FRONTEND: caturanga-frontend             # set this to your Amazon ECR repository name
  ECR_REPOSITORY_BACKEND: caturanga-backend
  # ECS_SERVICE: MY_ECS_SERVICE                           # set this to your Amazon ECS service name
  # ECS_CLUSTER: caturanga-cluster                        # set this to your Amazon ECS cluster name
  # ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION           # set this to the path to your Amazon ECS task definition
  #                                                       # file, e.g. .aws/task-definition.json
  # CONTAINER_NAME: MY_CONTAINER_NAME                     # set this to the name of the container in the
  #                                                       # containerDefinitions section of your task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a # uses this commit SHA version of the action

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}                     # uses the output from the `login-ecr` step
          IMAGE_TAG: ${{ github.sha }}                                              # uses the github commit SHA as the image tag
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # cd ../backend
      # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
      # docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
      # echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
